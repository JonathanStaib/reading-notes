# Cheat Sheet for Reading

## Reading 1 for markdown uses

- multiple pounds the less important the header as seen above
- lines for h1 h2
- must have blank space after any symbol
- no tabs or spces in front of paragraphs 
- To create a line break or new line (<br>), end a line with two or more spaces, and then type return.
-  **is bold** or __is bold__ use asterisks if its bolding a word in a sentence
- italics is one * *italics*
- ***bold and italicize***
- first second third ... item for li1 li2 li3
- list is what im doing now
- look at reading for more
- 


## Reading 2

All i was able to get done

# Text Editor Slide

- Text editors are a good way to save time. Time is money, it will alow you to have presets and correct your code if incorrect.
- Text editors are all preference
- themes and whatecer syntax highlighting is, sounds important.
- Text editors include Emmet which will speed up your HTML and CSS and make them more effecient
- different colored texts for different codes to make it easier to find and not make everything feel cluttered

# Using the Software That Already Comes With Your Computer

- Computers already come with a built in text editor but theyre not as effecient and dont have as many features
- Save your websites as new folders with proper names in your computer if using a text editor thats built in

# Third party Extensions

- Notepad++ has a built in chat room if u ahve any questions (FREE)
- Cant use Text Wrangler/BB im on Windows ($50)
- Visual Studio Code is already set up for you no additional work needed to set up. Comes with Emmet shorthand for HTML AND CSS
- Atom is very similar with VSC but is part of github
- Brackets only supports HTML CSS and JavaScript but comes with a Live Preview
- Sublime Text is $70 but is very fast and reliable

# THe command line, Notes taken from lice class as well

- Shows how to open terminal and a few commands within in and what they mean
- Will need an SSH client for window
- ls is to list
- cd space ___ is to change direction
- pwd is to bring u to primary users files
- cd with nothing after will bring u to starting user
- code space . will bring u to code app that youve made
- to go backwards: cd .. for one level, cd ... for 2 levels and so on
- mkdir space ___ to make directory (make new file) (- if u want to make multiple words, no spaces)
- go to where u want to go before opening vs code unless u want a fried pc 
- ol 5 li for multiples list
- 

# Basic Navigation

- SOme notes are listed above as i just copy pasted my notes form lecture
- Absolutea nad relative, single slash is the root directory starts with a single slash /
- ~ for home, . for current, .. for parent
- Copy pasted this but it felt important... /etc - Stores config files for the system.
/var/log - Stores log files for various system programs. (You may not have permission to look at everything in this directory. Don't let that stop you exploring though. A few error messages never hurt anyone.)
/bin - The location of several commonly used programs (some of which we will learn about in the rest of this tutorial. /usr/bin - Another location for programs on the system.

# About filing

- file obtain information about what type of file a file or directory is.

## Reading 3 Seeing your remote

- *git stash* command to hide a part but not lose it, *git stash apply* to unhide it
- *git remote* to view all short names of remote handlers
- *git remote -v* to view their urls
- *git remote add "shortname" space url* to create to repository with shortname
- dont understand fetching, ask! *git fetch [remote-name]*
- *git push [remote-name][branch-name]* for pushing
- *git remote rename old shortname then new shortname* (ex: js jn) to rename short name
- *git remote rm "shortname"* to remove shortname
- Dont understand commit changes, ASK! *git commit --amend* 
- *git revert "HEAD"* to undo changes on new commit
- *git checkout -- name* to to have a file return to previous state
- *git branch test* to create new branch towards your most recent commmit and wont switch you over to the new branch
- *git checkout* to switch to another branch
- *git checkout -b test2* to create new branch and switch to it
- *git branch* to list all branches
-  *git checkout master* and then *git merge test* to seitch to master nad merge changes from tests to master
- Ask about fast forward and three way merge confused
- *git pull* to fetch and merge changes
- *git branch -d test* to delete a branch
- *git status to veiw unmerged files*
- *git branch -v* to view latest commits
- *git branch --merged* to see if they have been merged
- *git branch --no-merged* to see which havent
- *git checkout test* then seperately *git rebase master* to rebase 
- *git log* to view committed cnapshots and this can be filtered in many ways, research if need
- *git tag* with info after to flag certain points as important
- Annotated tag is very important, Lightweight is a pointer
- *git checkout -b "[branchname][tagname]"* to create new branch with tag
- *git config --"global alias.br branch"* to set up aliases
- 

